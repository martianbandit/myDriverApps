{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { supabase } from \"../services/supabase\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    errorMessage = _useState6[0],\n    setErrorMessage = _useState6[1];\n  var handleLogin = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var _yield$supabase$auth$ = yield supabase.auth.signIn({\n          email: email,\n          password: password\n        }),\n        user = _yield$supabase$auth$.user,\n        error = _yield$supabase$auth$.error;\n      if (error) {\n        setErrorMessage(error.message);\n      } else {\n        navigation.navigate('Dashboard');\n      }\n    });\n    return function handleLogin() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    children: [_jsx(TextInput, {\n      placeholder: \"Email\",\n      value: email,\n      onChangeText: setEmail\n    }), _jsx(TextInput, {\n      placeholder: \"Password\",\n      value: password,\n      secureTextEntry: true,\n      onChangeText: setPassword\n    }), _jsx(Button, {\n      title: \"Login\",\n      onPress: handleLogin\n    }), errorMessage ? _jsx(Text, {\n      children: errorMessage\n    }) : null]\n  });\n};\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","supabase","View","TextInput","Button","Text","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","navigation","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","errorMessage","setErrorMessage","handleLogin","_ref2","_asyncToGenerator","_yield$supabase$auth$","auth","signIn","user","error","message","navigate","apply","arguments","children","placeholder","value","onChangeText","secureTextEntry","title","onPress"],"sources":["/workspaces/myDriverApps/screens/LoginScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { supabase } from '../services/supabase';\nimport { View, TextInput, Button, Text } from 'react-native';\n\nconst LoginScreen = ({ navigation }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleLogin = async () => {\n    const { user, error } = await supabase.auth.signIn({ email, password });\n    if (error) {\n      setErrorMessage(error.message);\n    } else {\n      navigation.navigate('Dashboard');\n    }\n  };\n\n  return (\n    <View>\n      <TextInput\n        placeholder=\"Email\"\n        value={email}\n        onChangeText={setEmail}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        value={password}\n        secureTextEntry\n        onChangeText={setPassword}\n      />\n      <Button title=\"Login\" onPress={handleLogin} />\n      {errorMessage ? <Text>{errorMessage}</Text> : null}\n    </View>\n  );\n};\n\nexport default LoginScreen;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ;AAA+B,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,IAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAGhD,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EAC/B,IAAAC,SAAA,GAA0Bb,QAAQ,CAAC,EAAE,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAAI,UAAA,GAAgClB,QAAQ,CAAC,EAAE,CAAC;IAAAmB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAAG,UAAA,GAAwCtB,QAAQ,CAAC,EAAE,CAAC;IAAAuB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA7CE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EAEpC,IAAMG,WAAW;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;MAC9B,IAAAC,qBAAA,SAA8B5B,QAAQ,CAAC6B,IAAI,CAACC,MAAM,CAAC;UAAEf,KAAK,EAALA,KAAK;UAAEI,QAAQ,EAARA;QAAS,CAAC,CAAC;QAA/DY,IAAI,GAAAH,qBAAA,CAAJG,IAAI;QAAEC,KAAK,GAAAJ,qBAAA,CAALI,KAAK;MACnB,IAAIA,KAAK,EAAE;QACTR,eAAe,CAACQ,KAAK,CAACC,OAAO,CAAC;MAChC,CAAC,MAAM;QACLtB,UAAU,CAACuB,QAAQ,CAAC,WAAW,CAAC;MAClC;IACF,CAAC;IAAA,gBAPKT,WAAWA,CAAA;MAAA,OAAAC,KAAA,CAAAS,KAAA,OAAAC,SAAA;IAAA;EAAA,GAOhB;EAED,OACE5B,KAAA,CAACP,IAAI;IAAAoC,QAAA,GACH/B,IAAA,CAACJ,SAAS;MACRoC,WAAW,EAAC,OAAO;MACnBC,KAAK,EAAExB,KAAM;MACbyB,YAAY,EAAExB;IAAS,CACxB,CAAC,EACFV,IAAA,CAACJ,SAAS;MACRoC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAEpB,QAAS;MAChBsB,eAAe;MACfD,YAAY,EAAEpB;IAAY,CAC3B,CAAC,EACFd,IAAA,CAACH,MAAM;MAACuC,KAAK,EAAC,OAAO;MAACC,OAAO,EAAElB;IAAY,CAAE,CAAC,EAC7CF,YAAY,GAAGjB,IAAA,CAACF,IAAI;MAAAiC,QAAA,EAAEd;IAAY,CAAO,CAAC,GAAG,IAAI;EAAA,CAC9C,CAAC;AAEX,CAAC;AAED,eAAed,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}